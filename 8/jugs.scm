;;; Theta(n^2)
(define (compare-jugs reds blues)
  (map (lambda (red)
         (cons red (find (lambda (blue) (= red blue)) blues)))
       reds))

(define (tri-partition urelt elts)
  (loop continue ((for elt (in-list elts))
                  (with elt= -1)
                  (with elts> '())
                  (with elts< '()))
        => (values elts< elt= elts>)
        (cond ((< elt urelt) (continue (=> elts< (cons elt elts<))))
              ((> elt urelt) (continue (=> elts> (cons elt elts>))))
              (else (continue (=> elt= elt))))))

;;; Omicron(n lg n)
(define (compare-jugs-random reds blues)
  (if (null? reds)
      '()
      (let ((red (list-ref reds (random-integer (length reds)))))
        (let*-values (((blues< blue blues>) (tri-partition red blues))
                      ((reds< red reds>) (tri-partition blue reds)))
                     (append (list (cons red blue))
                             (compare-jugs-random reds< blues<)
                             (compare-jugs-random reds> blues>))))))
