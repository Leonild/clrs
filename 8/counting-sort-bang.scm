(define (counting-sort! fortuita)
  (let* ((max (+ (vector-max fortuita) 1))
         (numerata (make-vector (inexact->exact max) 0)))
    (loop ((for x (in-vector fortuita)))
          (vector-set! numerata x (+ (vector-ref numerata x) 1)))
    (loop ((for x i (in-vector numerata 1)))
          (vector-set! numerata i (+ x (vector-ref numerata (- i 1)))))
    (let ((length (vector-length fortuita)))
      (loop continue ((with swap-count 0 (+ swap-count 1))
                      (until (= swap-count length))
                      (with index (- length 1)))
            (let* ((ref (vector-ref fortuita index))
                   (count-index (- (vector-ref numerata ref) 1)))
              (vector-set! numerata ref count-index)
              (if (= count-index index)
                  (continue (=> index (- index 1)))
                  (begin
                    (vector-swap! fortuita index count-index)
                    (continue))))))))
