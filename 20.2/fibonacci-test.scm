(require-extension check)
(require '../20.2/section)
(require '../util/util)
(import section-20.2)
(import util)
(let ((h1 (make-fibonacci-heap #f 0))
      (h2 (make-fibonacci-heap #f 0))
      (n1 (make-fibonacci-node 1 'harro #f #f #f #f #f 0))
      (n2 (make-fibonacci-node 2 'harro #f #f #f #f #f 0))
      (n3 (make-fibonacci-node 3 'harro #f #f #f #f #f 0))
      (n4 (make-fibonacci-node 4 'harro #f #f #f #f #f 0)))
  (fibonacci-heap-insert! h1 n1)
  (fibonacci-heap-insert! h1 n2)
  (fibonacci-heap-insert! h1 n3)
  (fibonacci-heap-insert! h1 n4)
  (let ((union (fibonacci-heap-union! h1 h2)))
    (check (fibonacci-heap->list fibonacci-node-key union)
           => '((2) (3) (4) (1)))
    (check (fibonacci-node-key (fibonacci-heap-extract-min! union))
           => 1)
    (check (fibonacci-heap->list fibonacci-node-key union)
           => '((3 (4)) (2)))
    (check (fibonacci-node-key (fibonacci-heap-extract-min! union))
           => 2)
    (check (fibonacci-heap->list fibonacci-node-key union)
           => '((3 (4))))
    (check (fibonacci-node-key (fibonacci-heap-extract-min! union))
           => 3)
    (check (fibonacci-heap->list fibonacci-node-key union)
           => '((4)))
    (check (fibonacci-node-key (fibonacci-heap-extract-min! union))
           => 4)
    (check (fibonacci-heap->list fibonacci-node-key union)
           => '())))
