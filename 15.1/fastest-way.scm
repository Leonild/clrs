(define (fastest-way a t e0 e1 x0 x1 n)
  (let ((f (make-array 2 n))
        (l (make-array '#(#f) 2 n))
        (f* 0)
        (l* 0))
    (array-set! f (+ e0 (array-ref a 0 0)) 0 0)
    (array-set! f (+ e1 (array-ref a 1 0)) 1 0)
    (loop ((for j (up-from 1 (to n))))
          (let ((first-straight (+ (array-ref f 0 (- j 1))
                                   (array-ref a 0 j)))
                (first-cross (+ (array-ref f 1 (- j 1))
                                (array-ref t 1 (- j 1))
                                (array-ref a 0 j)))
                (second-straight (+ (array-ref f 1 (- j 1))
                                    (array-ref a 1 j)))
                (second-cross (+ (array-ref f 0 (- j 1))
                                 (array-ref t 0 (- j 1))
                                 (array-ref a 1 j))))
            (if (<= first-straight first-cross)
                (begin (array-set! f first-straight 0 j)
                       (array-set! l 0 0 j))
                (begin (array-set! f first-cross 0 j)
                       (array-set! l 1 0 j)))
            (if (<= second-straight second-cross)
                (begin (array-set! f second-straight 1 j)
                       (array-set! l 1 1 j))
                (begin (array-set! f second-cross 1 j)
                       (array-set! l 0 1 j)))))
    (let ((first-finish (+ (array-ref f 0 (- n 1)) x0))
          (second-finish (+ (array-ref f 1 (- n 1)) x1)))
      (if (<= first-finish second-finish)
          (begin (set! f* first-finish)
                 (set! l* 0))
          (begin (set! f* second-finish)
                 (set! l* 1))))
    (values f l f* l*)))

(define (stations l l* n)
  (let ((stations '())
        (i l*))
    (set! stations (cons i stations))
    (loop ((for j (down-from n (to 1))))
          (set! i (array-ref l i j))
          (set! stations (append stations (list i))))
    stations))

(define (stations/recursive l l* n)
  (let ((next l*))
    (define (iter l0 l1)
      (if (null? l0)
          (list next)
          (begin (set! next (cond ((not next) 0)
                                  ((zero? next) (car l0))
                                  (else (car l1))))
                 (cons next (iter (cdr l0) (cdr l1))))))
    (iter (vector->list (array-row-ref l 0))
          (vector->list (array-row-ref l 1)))))
