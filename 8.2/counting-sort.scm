(define (enumerate! fortuita numerata)
  (loop ((for x (in-vector fortuita)))
        (vector-set! numerata x (+ (vector-ref numerata x) 1))))

(define (leq! numerata)
  (loop ((for x i (in-vector numerata 1)))
        (vector-set! numerata i (+ x (vector-ref numerata (- i 1))))))

(define (sort! numerata sortita x)
  (let ((count-index (- (vector-ref numerata x) 1)))
    (vector-set! sortita count-index x)
    (vector-set! numerata x count-index)))

(define (vector-max vector)
  (loop ((for x (in-vector vector))
         (with max-x -inf.0 (max x max-x)))
        => max-x))

(define (make-numerata fortuita)
  (let ((max (+ (vector-max fortuita) 1)))
    (make-vector max 0)))

(define (counting-sort fortuita)
  (let* ((sortita (make-vector (vector-length fortuita)))
         (numerata (make-numerata fortuita)))
    (enumerate! fortuita numerata)
    (leq! numerata)
    (loop ((for x (in-vector-reverse fortuita)))
          (sort! numerata sortita x))
    sortita))

(define (unstable-counting-sort fortuita)
  (let* ((sortita (make-vector (vector-length fortuita)))
         (numerata (make-numerata fortuita)))
    (enumerate! fortuita numerata)
    (leq! numerata)
    (loop ((for x (in-vector fortuita)))
          (sort! numerata sortita x))
    sortita))

(define (enumerator fortuita)
  (let ((numerata (make-numerata fortuita)))
    (enumerate! fortuita numerata)
    (leq! numerata)
    (lambda (a b) (- (vector-ref numerata b)
                     (vector-ref numerata a)))))
