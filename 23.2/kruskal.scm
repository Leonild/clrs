(define (minimum-spanning-tree/kruskal graph)
  (let ((edges (sort (graph-edges graph) < edge-weight)))
    (loop continue ((for edge (in-list edges))
                    (with tree-edges '()))
          => tree-edges
          (let ((whence (edge-whence edge))
                (whither (edge-whither edge)))
            (let ((whence-representative (member-representative whence))
                  (whither-representative (member-representative whither)))
              (debug (map member-datum (list whence
                                             whither
                                             whence-representative
                                             whither-representative)))
              (if (not (eq? whence-representative whither-representative))
                  (begin
                    (if (eq? whence whence-representative)
                        (set-member-representative! whence whither-representative)
                        (set-member-representative! whither whence-representative))
                    (continue (=> tree-edges (cons edge tree-edges))))
                  (continue)))))))

(define (figure-23.1)
  (let ((a (make-member 'a #f))
        (b (make-member 'b #f))
        (c (make-member 'c #f))
        (d (make-member 'd #f))
        (e (make-member 'e #f))
        (f (make-member 'f #f))
        (g (make-member 'g #f))
        (h (make-member 'h #f))
        (i (make-member 'i #f)))
    (set-member-representative! a a)
    (set-member-representative! b b)
    (set-member-representative! c c)
    (set-member-representative! d d)
    (set-member-representative! e e)
    (set-member-representative! f f)
    (set-member-representative! g g)
    (set-member-representative! h h)
    (set-member-representative! i i)
    (let ((ab (make-edge a b 4))
          (bc (make-edge b c 8))
          (cd (make-edge c d 7))
          (de (make-edge d e 9))
          (ef (make-edge e f 10))
          (fg (make-edge f g 2))
          (gh (make-edge g h 1))
          (ha (make-edge h a 8))
          (bh (make-edge b h 11))
          (hi (make-edge h i 7))
          (ic (make-edge i c 2))
          (ig (make-edge i g 6))
          (cf (make-edge c f 4))
          (fd (make-edge f d 14)))
      (let ((graph `((,a ,ab)
                     (,b ,bc ,bh)
                     (,c ,cd ,cf)
                     (,d ,de)
                     (,e ,ef)
                     (,f ,fg ,fd)
                     (,g ,gh)
                     (,h ,ha)
                     (,i ,ic ,ig))))
        graph))))
