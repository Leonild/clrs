(define (swap! vector i j)
  (let ((temp (vector-ref vector j)))
    (vector-set! vector j (vector-ref vector i))
    (vector-set! vector i temp)))

(define (hoare-partition! vector p r)
  (let ((x (vector-ref vector p))
        (i p)
        (j r))
    (call-with-current-continuation
     (lambda (return)
       (let loop ()
         (let loop ((j-ref (vector-ref vector j)))
           (if (> j-ref x)
               (begin (set! j (- j 1))
                      (loop (vector-ref vector j)))))
         (let loop ((i-ref (vector-ref vector i)))
           (if (< i-ref x)
               (begin (set! i (+ i 1))
                      (loop (vector-ref vector i)))))
         (if (< i j)
             (begin
               (swap! vector i j)
               (loop))
             (return j)))))))

(define (hoare-quicksort! vector p r)
  (if (< p r)
      (let ((q (hoare-partition! vector p r)))
        (hoare-quicksort! vector p (- q 1))
        (hoare-quicksort! vector (+ q 1) r))))

(let ((vector (vector 13 19 9 5 12 8 7 4 11 2 6 21)))
  (hoare-quicksort! vector 0 (- (vector-length vector) 1))
  vector)

;;; #(2 4 5 6 7 8 9 11 12 13 19 21)
