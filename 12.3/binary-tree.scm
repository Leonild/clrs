(define (bt-insert! root node)
  (if (>= (bt-node-key node)
          (bt-node-key root))
      (let ((right (bt-node-right root)))
        (if right
            (bt-insert! right node)
            (begin (set-bt-node-right! root node)
                   (set-bt-node-parent! node root))))
      (let ((left (bt-node-left root)))
        (if left
            (bt-insert! left node)
            (begin (set-bt-node-left! root node)
                   (set-bt-node-parent! node root))))))

(define (leaf? node)
  (not (or (bt-node-left node) (bt-node-right node))))

(define (single-parent? node)
  (not (or (leaf? node) (full? node))))

(define (full? node)
  (and (bt-node-left node) (bt-node-right node)))

(define (splice-out! node)
  (let ((parent (bt-node-parent node))
        (left (bt-node-left node))
        (right (bt-node-right node)))
    (let ((parent-right (bt-node-right parent))
          (parent-left (bt-node-left parent))
          (grand-child (if left left right))) ; May be #f
      (if (eq? node parent-left)
          (set-bt-node-left! parent grand-child)
          (set-bt-node-right! parent grand-child)))))

(define (bt-delete! root node)
  (if (full? node)
      (let ((successor (bt-successor root node)))
        (splice-out! successor)
        (set-bt-node-key! node (bt-node-key successor))
        (set-bt-node-datum! node (bt-node-datum successor)))
      (splice-out! node)))

(define (figure-12.3)
  (let ((n12 (make-bt-node 12 12 #f #f #f))
        (n5 (make-bt-node 5 5 #f #f #f))
        (n18 (make-bt-node 18 18 #f #f #f))
        (n2 (make-bt-node 2 2 #f #f #f))
        (n9 (make-bt-node 9 9 #f #f #f))
        (n15 (make-bt-node 15 15 #f #f #f))
        (n19 (make-bt-node 19 19 #f #f #f))
        (n17 (make-bt-node 17 17 #f #f #f)))
    (set-bt-node-left-right-parent! n12 n5 n18 #f)
    (set-bt-node-left-right-parent! n5 n2 n9 n12)
    (set-bt-node-left-right-parent! n18 n15 n19 n12)
    (set-bt-node-left-right-parent! n2 #f #f n5)
    (set-bt-node-left-right-parent! n9 #f #f n5)
    (set-bt-node-left-right-parent! n15 #f n17 n18)
    (set-bt-node-left-right-parent! n19 #f #f n18)
    (set-bt-node-left-right-parent! n17 #f #f n15)
    n12))

(define (figure-12.4)
  (let ((n15 (make-bt-node 15 15 #f #f #f))
        (n5 (make-bt-node 5 5 #f #f #f))
        (n16 (make-bt-node 16 16 #f #f #f))
        (n3 (make-bt-node 3 3 #f #f #f))
        (n12 (make-bt-node 12 12 #f #f #f))
        (n20 (make-bt-node 20 20 #f #f #f))
        (n10 (make-bt-node 10 10 #f #f #f))
        (n13 (make-bt-node 13 13 #f #f #f))
        (n18 (make-bt-node 18 18 #f #f #f))
        (n23 (make-bt-node 23 23 #f #f #f))
        (n6 (make-bt-node 6 6 #f #f #f))
        (n7 (make-bt-node 7 7 #f #f #f)))
    (set-bt-node-left-right-parent! n15 n5 n16 #f)
    (set-bt-node-left-right-parent! n5 n3 n12 n15)
    (set-bt-node-left-right-parent! n16 #f n20 n15)
    (set-bt-node-left-right-parent! n3 #f #f n5)
    (set-bt-node-left-right-parent! n12 n10 n13 n5)
    (set-bt-node-left-right-parent! n20 n18 n23 n16)
    (set-bt-node-left-right-parent! n10 n6 #f n12)
    (set-bt-node-left-right-parent! n13 #f #f n12)
    (set-bt-node-left-right-parent! n18 #f #f n20)
    (set-bt-node-left-right-parent! n23 #f #f n20)
    (set-bt-node-left-right-parent! n6 #f n7 n10)
    (set-bt-node-left-right-parent! n7 #f #f n6)
    `((n15 . ,n15)
      (n5 . ,n5)
      (n16 . ,n16)
      (n3 . ,n3)
      (n12 . ,n12)
      (n20 . ,n20)
      (n10 . ,n10)
      (n13 . ,n13)
      (n18 . ,n18)
      (n23 . ,n23)
      (n6 . ,n6)
      (n7 . ,n7))))

(define (figure-12.4/root figure-12.4) (cdr (assq 'n15 figure-12.4)))

(define (figure-12.4/13 figure-12.4) (cdr (assq 'n13 figure-12.4)))

(define (figure-12.4/16 figure-12.4) (cdr (assq 'n16 figure-12.4)))

(define (figure-12.4/6 figure-12.4) (cdr (assq 'n6 figure-12.4)))
