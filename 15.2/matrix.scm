(define (matrix-chain-order p)
  (let ((n (- (length p) 1)))
    (let ((m (make-array '#(+inf.0) n n))
          (s (make-array '#(#f) n n)))
      (loop ((for i (up-from 0 (to n))))
            (array-set! m 0 i i))
      (loop ((for l (up-from 2 (to (+ n 1)))))
            (loop ((for i (up-from 0 (to (+ (- n l) 1)))))
                  (let ((j (- (+ i l) 1)))
                    (loop ((for k (up-from i (to j))))
                          (let ((q (+ (array-ref m i k)
                                      (array-ref m (+ k 1) j)
                                      (* (list-ref p i)
                                         (list-ref p (+ k 1))
                                         (list-ref p (+ j 1))))))
                            (if (< q (array-ref m i j))
                                (begin (array-set! m q i j)
                                       (array-set! s k i j))))))))
      (values m s))))

(define (matrix-multiply A B)
  (let ((dim-A (array-dimensions A))
        (dim-B (array-dimensions B)))
    (let ((p (car dim-A))
          (q (cadr dim-A))
          (r (car dim-B))
          (s (cadr dim-B)))
      (if (not (= q r))
          (error "nicht going to worken, freund -- MATRIX-MULTIPLY"
                 (list q r)))
      (array-index-map!
       (make-array p s)
       (lambda (x y)
         (let ((row (make-shared-array A (lambda (i) (list x i)) q))
               (col (make-shared-array B (lambda (j) (list j y)) q)))
           (let ((multiplicata (array-map '#(#f) * row col)))
             (array-fold + 0 multiplicata))))))))
