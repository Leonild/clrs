(define (stack-enqueue! stack x)
  (let* ((data (stack-data stack))
         (length (vector-length data))
         (temp (make-stack (make-vector length #f) -1)))
    (push! temp x)
    (loop ((until (stack-empty? stack)))
          (push! temp (pop! stack)))
    (loop ((until (stack-empty? temp)))
          (push! stack (pop! temp)))))

(define (stack-dequeue! stack)
  (let* ((data (stack-data stack))
         (length (vector-length data))
         (temp (make-stack (make-vector length #f) -1)))
    (loop ((until (stack-empty? stack)))
          (push! temp (pop! stack)))
    (let ((x (pop! temp)))
      (vector-fill! data #f)
      (loop ((until (stack-empty? temp)))
            (push! stack (pop! temp)))
      x)))

(define (queue-push! queue x)
  (let* ((data (queue-data queue))
         (length (vector-length data))
         (temp (make-queue (make-vector length #f) 0 0)))
    (enqueue! temp x)
    (loop ((until (queue-empty? queue)))
          (enqueue! temp (dequeue! queue)))
    (loop ((until (queue-empty? temp)))
          (enqueue! queue (dequeue! temp)))))

(define (queue-pop! queue)
  (let* ((data (queue-data queue))
         (length (vector-length data))
         (temp (make-queue (make-vector length #f) 0 0)))
    (loop ((until (queue-empty? queue)))
          (enqueue! temp (dequeue! queue)))
    (let ((x (dequeue! temp)))
      (vector-fill! data #f)
      (loop ((until (queue-empty? temp)))
            (enqueue! queue (dequeue! temp)))
      x)))
