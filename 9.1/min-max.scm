(define (min+max a b)
  (if (< a b)
      (values a b)
      (values b a)))

(define (min-max list)
  (let*-values (((pairs rest) (divide 2 list))
                ((urmin urmax) (cond ((null? rest) (values +inf.0 -inf.0))
                                     ((null? (cdr rest)) (values (car rest)
                                                                 (car rest)))
                                     (else (apply min+max rest)))))
               (loop continue ((for pair (in-list pairs))
                               (with lmin urmin)
                               (with lmax urmax))
                     => (values (inexact->exact lmin) (inexact->exact lmax))
                     (let-values (((mmin mmax) (apply min+max pair)))
                       (continue (=> lmin (min lmin mmin))
                                 (=> lmax (max lmax mmax)))))))
